public class P5 {
    public static void main(String[] args) {
        
        // 산술 연산자

        {        
            int a = 10;
            int b = a + 10;
            int c = a + b;

            byte v1 = 10 + 20;
            byte v2 = 30;
            byte v3 = v1 + v2;

            // 이 경우 문법오류가 뜬다. 그 이유는 덧셈은 무조건 in로 프로모션 되기 때문에 결과값이 in로 나오기 때문이다.
            // 그래서 이 경우 강제 캐스팅을 해야하니, 실제로 산술 연산자에선 byte는 쓰지 않는다. 그냥 int로 쓰면 된다.

            byte v3 = (byte)(v1 + v2);  // 캐스팅할 땐 이렇게 괄호로 묶어서 해야한다. (그냥 int 쓰자.)
        }
        {
            int a = 10;
            double b = 20.0;
            int c = a + b;
        }
            // c의 문법오류에 마우스를 올려보면 타입미스매치 오류가 뜬다. 
            // 자바에선 정수 + 실수 계산이 안 되기 때문에 애초에 c의 타입을 double로 지정하거나,
            // a + b; 를 (int)(a + b); 로 캐스팅 해야한다.
            // 코딩할땐 애초에 이런일이 발생하지 않도록, 타입을 잘 정해서 타입이 다른 것 끼리 연산되는 상황 자체가 안 나오도록 한다.
        {
            int a = 10;
            long b = 20;
            long c = a + b;
        }
            // 이렇게 프로모션이 되게 할 수도 있다.



        {
            int a = 10;
            double b = a / 3;

            System.out.println(b);
        }

            // 이 경우, 결과값을 3.33333 .. 으로 출력하고 싶을 땐
        {
            int a = 10;
            double b = a / (double)3;

            System.out.println(b);
        }
            // 이렇게 캐스팅을 하면 된다. 자바에서 나눗셈은 태초에 정해진 규칙상, 피연산자중 하나라도 실수면 둘 다 실수로 변환해서 계산한다.
            // 따라서 전체로 묶지 않고 보통 개발자들은 분모에만 캐스팅을 붙인다.
        {
            int a = 5;
            int b = 2;
            int c = a / b;

            int d = a / (double)b ; // 이렇게 하면 안 되고
            double d = a / (double)b ; // 이렇게
        }

            // 나머지 연산자(%)  나머지는 분모가 특정 숫자(5) 면 결과는 5에 한정된다(0~4).



            // 정수는 0으로 나눌 수 없다.
        {
            int a = 10/0 ;  // 이 경우 수학적으로 불가능하기 때문에 exception 오류가 뜬다.
        }
            // 근데 예외적으로 실수는 가능하다.
        {
            double a = 10/0.0;  // 이걸 실행시키면, Infinity 라고 출력된다. 무한대로 발산하니까.
            double b = 0.0 / 0.0 ;  // 이건 NaN(Not a Number)이 출력된다.  0분의 0 극한인데 그냥 그렇다고. 이런 예외가 있다~ 정도.
        }




        }





}
